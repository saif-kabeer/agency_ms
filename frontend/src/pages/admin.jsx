import React, { useState, useEffect } from 'react'; // Import useEffect

function AdminDashboard() {
    const [clients, setClients] = useState([]);
    const [newClient, setNewClient] = useState({
        // client_id is auto-generated by the database, remove it from here
        name: '',
        contact_info: '',
        contract_details: '',
    });
    const [isLoading, setIsLoading] = useState(false); // Optional: for loading state
    const [error, setError] = useState(null); // Optional: for error handling

    // Function to fetch clients
    const fetchClients = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const response = await fetch('http://localhost:3000/clients');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            setClients(data);
        } catch (e) {
            console.error("Failed to fetch clients:", e);
            setError('Failed to load clients.');
        } finally {
            setIsLoading(false);
        }
    };

    // Fetch clients when the component mounts
    useEffect(() => {
        fetchClients();
    }, []); // Empty dependency array means this runs once on mount

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewClient((prevClient) => ({
            ...prevClient,
            [name]: value,
        }));
    };

    const handleAddClient = async (e) => { // Make the function async
        e.preventDefault();
        // Basic validation: ensure name is not empty
        if (!newClient.name.trim()) {
                alert('Client Name is required.');
                return;
        }

        setIsLoading(true); // Optional: indicate loading
        setError(null);

        try {
            const response = await fetch('http://localhost:3000/clients', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newClient), // Send new client data
            });

            if (!response.ok) {
                 const errorData = await response.text(); // Or response.json() if backend sends JSON error
                 throw new Error(`Failed to add client: ${errorData}`);
            }

            // const result = await response.json(); // Contains { message: '...', clientId: ... }
            // console.log('Client added:', result);

            // Reset form
            setNewClient({
                name: '',
                contact_info: '',
                contract_details: '',
            });

            // Refetch clients to update the list
            fetchClients();

        } catch (e) {
            console.error("Failed to add client:", e);
            setError(`Failed to add client: ${e.message}`);
            alert(`Error: ${e.message}`); // Show error to user
        } finally {
             setIsLoading(false); // Optional: stop loading indicator
        }
    };

    return (
        <div style={{ padding: '20px' }}>
            <h1>Admin Dashboard</h1>

            {error && <p style={{ color: 'red' }}>{error}</p>} {/* Display errors */}

            <h2>Create New Client</h2>
            <form onSubmit={handleAddClient} style={{ marginBottom: '20px', border: '1px solid #ccc', padding: '15px', borderRadius: '5px' }}>
                 {/* Remove Client ID input field */}
                <div style={{ marginBottom: '10px' }}>
                    <label style={{ marginRight: '10px', minWidth: '120px', display: 'inline-block' }}>Name:</label>
                    <input
                        type="text"
                        name="name"
                        value={newClient.name}
                        onChange={handleInputChange}
                        required
                        style={{ padding: '8px', width: 'calc(100% - 140px)' }}
                    />
                </div>
                <div style={{ marginBottom: '10px' }}>
                    <label style={{ marginRight: '10px', minWidth: '120px', display: 'inline-block' }}>Contact Info:</label>
                    <input
                        type="text"
                        name="contact_info"
                        value={newClient.contact_info}
                        onChange={handleInputChange}
                        style={{ padding: '8px', width: 'calc(100% - 140px)' }}
                    />
                </div>
                <div style={{ marginBottom: '10px' }}>
                    <label style={{ marginRight: '10px', minWidth: '120px', display: 'inline-block' }}>Contract Details:</label>
                    <textarea
                        name="contract_details"
                        value={newClient.contract_details}
                        onChange={handleInputChange}
                        rows="3"
                        style={{ padding: '8px', width: 'calc(100% - 140px)', verticalAlign: 'top' }}
                    />
                </div>
                <button type="submit" style={{ padding: '10px 15px', cursor: 'pointer' }} disabled={isLoading}>
                    {isLoading ? 'Adding...' : 'Add Client'} {/* Optional: disable button while loading */}
                </button>
            </form>

            <h2>Client List</h2>
            {isLoading && clients.length === 0 && <p>Loading clients...</p>} {/* Show loading only initially */}
            {!isLoading && clients.length === 0 && !error && <p>No clients found.</p>}
            {clients.length > 0 && (
                <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                    <thead>
                        <tr>
                            <th style={tableHeaderStyle}>Client ID</th>
                            <th style={tableHeaderStyle}>Name</th>
                            <th style={tableHeaderStyle}>Contact Info</th>
                            <th style={tableHeaderStyle}>Contract Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        {clients.map((client) => (
                            // Use client.client_id from the database as the key
                            <tr key={client.client_id}>
                                <td style={tableCellStyle}>{client.client_id}</td>
                                <td style={tableCellStyle}>{client.name}</td>
                                <td style={tableCellStyle}>{client.contact_info}</td>
                                <td style={tableCellStyle}>{client.contract_details}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>
    );
}

// Basic styling for table
const tableHeaderStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    textAlign: 'left',
    backgroundColor: '#f2f2f2',
};

const tableCellStyle = {
    border: '1px solid #ddd',
    padding: '8px',
    textAlign: 'left',
};

export default AdminDashboard;